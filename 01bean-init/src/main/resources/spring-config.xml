<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:application.properties"/>

    <!--
        任务一：bean初始化及标签scope的使用
            - 属性的getter、setter
    -->
    <!--scope: 表示单例或者多实例-->
    <bean class="com.mountain.model.BookNum" id="book" scope="singleton">
        <property name="bookName" value="平凡的世界"/>
        <property name="author" value="路遥"/>
        <property name="age" value="${book.age}"/>
    </bean>

    <!--
        任务二：构造方法初始化bean及标签index顺序赋值使用
            - 带参构造方法
    -->
    <bean class="com.mountain.model.BookNum" id="book01">
        <constructor-arg value="红楼梦" index="0"/>
        <constructor-arg value="曹雪芹" index="1"/>
        <constructor-arg value="45" index="2"/>
    </bean>

    <!--
        任务三：泛型容器的赋值list、map、List<Object>;标签ref的外部引用；parent继承属性及修改对应的bean属性值[指向性，所以当重新对对象赋值后，原对象的属性值也会跟着改变]；
    -->
    <bean class="com.mountain.model.Person" id="person01">
        <property name="lastName" value="小明"/>
        <property name="age" value="12"/>
        <property name="list">
            <list>
                <value>123</value>
                <value>book</value>
            </list>
        </property>
        <property name="maps">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
                <!--<entry key="key3" key-ref="book" value=""></entry>-->
            </map>
        </property>
        <!--可直接声明引用，引用的是同一对象，可修改对象的属性值-->
        <!--<property name="book" ref="book01">-->
        <property name="book">
            <!--parent：对某个bean的引用，相当于类的extend，不是同一个对象！-->
            <bean class="com.mountain.model.Book" parent="book">
                <property name="bookName" value="西游记"/>
                <property name="age" value="13"/>
            </bean>
        </property>
        <property name="books">
            <list>
                <bean class="com.mountain.model.Book">
                    <property name="bookName" value="books01"/>
                    <property name="author" value="author01"/>
                </bean>
                <bean class="com.mountain.model.Book">
                    <property name="bookName" value="books02"/>
                    <property name="age" value="100"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--
        任务四：abstract声明true时候不会生成对应的bean，此时对象只能作为模板，被其他bean所引用；
    -->
    <!--exception: BeanIsAbstractException: Error creating bean with name 'bookTemplate': Bean definition is abstract -->
    <bean class="com.mountain.model.BookNum" id="bookTemplate" abstract="true">
        <constructor-arg value="bookNameTemp"/>
        <constructor-arg value="authorTemp"/>
        <constructor-arg value="12"/>
    </bean>

</beans>