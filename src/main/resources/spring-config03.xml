<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">

   <!--
        实验一: 通过注解创建Dao service controller
        1. @Controller
        2. @Service
        3. @Repository：持久层
        4. @Component：通用组件

        使用注解将组件快速添加到容器中：
        1. 给要添加的组件上标注四个注解任何一个
        2. 告诉spring自动扫描加入了注解的组件，依赖context明明空间
            - id默认是类名首字母小写,可以通过@Component("newComponent")来修改对应的bean id]
            - @Scope 可以声明单例或者多实例
            - 通过<context:component-scan base-package="com.mountain"/>来进行扫描包
        3.  一定要导入aop包（支持注解模式）【com.springframework.aop.targetSource】
   -->
    <context:component-scan base-package="com.mountain"/>


    <!--
        实验二: 使用context:include-filter指定扫描包时要包含的类
            - 与exclude-filter相反
            - 此时需要禁用默认全局扫描规则
                <context:component-scan base-package="com.mountain" use-default-filters="false">

        实验三：使用context:exclude-filter指定扫描包是不包含的类
            type 类型含义
            - type="annotation": 指定排除规则，按照注解进行排除，标注了指定注解的组件不要 expression="" 注解的全类名
                <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
            - type="assignable": 指定排除某个具体的类，按照类排除 expression="" 类的全类名
                <context:exclude-filter type="assignable" expression="com.mountain.service.serviceImpl.ServiceTest"/>
            - type="aspectj"
            - type="custom"
            - type="regex"

        -->

    <!--<context:component-scan base-package="com.mountain">
        <context:exclude-filter type="assignable" expression="com.mountain.service.serviceImpl.ServiceTest"/>
        <context:include-filter type="annotation" expression="com.mountain.service.serviceImpl.ServiceTest"/>
    </context:component-scan>-->

    <!--
        实验四: DI依赖注入
            使用@Autowired实现自动注入，bean之间方法的相互调用，直接获取实例执行方法，等同于注解里面的 <bean autowired="byName或者byType等">
            - 原理：等同于 ioc.getBean(Xxx.class);
                - 找到一个就赋值
                - 没有找到抛异常，不抛异常可以通过@Autowired(required=false)对应没找到null，默认是true
                - 找到多个？装配上？: 按照变量名作为id继续匹配，若有继承关系则对应的应该是类名首字母小写的id 例如：BookService(bookService) 与 BookServiceImpl(bookServiceImpl)
            - 使用范围
                - 使用在方法上：
                    - 这个方法也会在bean创建的时候自动运行
                    - 方法没有给参数都会自动注入

            使用@Qualifier:指定一个名称作为id,让spring别用变量名作为id @Qualifier("beanId")

            使用@Resource注解，效果等同于@Autowired

            @Autowired/@Resource/@Inject注解区别：
            - @Autowired：org.springframework.beans.factory.annotation.Autowired spring自己的注解
            - @Resource：javax.annotation.Resource j2ee注解，扩展性更强，如果切换成另一个容器框架，@Resource依然适用
    -->
    <!--<context:component-scan base-package="com.mountain">

    </context:component-scan>-->

</beans>